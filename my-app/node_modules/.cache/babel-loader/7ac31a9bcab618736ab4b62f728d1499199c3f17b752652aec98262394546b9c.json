{"ast":null,"code":"var _jsxFileName = \"/Users/mayank.mongia/Desktop/Personal/Repo Final/BASKETBALLCLUB/Elite-Final/WIP/GettingThere/Untitled/my-app/src/Component/Main/Transcript/Transcript.js\",\n  _s = $RefreshSig$();\n// Transcript.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transcript = ({\n  text,\n  audioRef\n}) => {\n  _s();\n  const [highlightedIndex, setHighlightedIndex] = useState(0);\n  useEffect(() => {\n    const handleTimeUpdate = () => {\n      const currentTime = audioRef.current.currentTime;\n      // Find the index of the transcript text that corresponds to the current audio time\n      const index = findHighlightedIndex(currentTime);\n      setHighlightedIndex(index);\n    };\n    const findHighlightedIndex = currentTime => {\n      // Logic to find the index of the transcript text based on the current audio time\n      // You might need to adjust this logic based on the format of your transcript text and how it matches the audio\n      // For simplicity, let's assume each sentence in the transcript corresponds to a fixed duration of audio\n      const durationPerSentence = 5; // Assuming each sentence lasts for 5 seconds\n      return Math.floor(currentTime / durationPerSentence);\n    };\n    audioRef.current.addEventListener('timeupdate', handleTimeUpdate);\n    return () => {\n      audioRef.current.removeEventListener('timeupdate', handleTimeUpdate);\n    };\n  }, [audioRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transcript\",\n    children: text.map((sentence, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: index === highlightedIndex ? 'highlighted' : '',\n      children: sentence\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Transcript, \"GtMU2p40MX5uoPSonSAGzcHI+G4=\");\n_c = Transcript;\nexport default Transcript;\nvar _c;\n$RefreshReg$(_c, \"Transcript\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Transcript","text","audioRef","_s","highlightedIndex","setHighlightedIndex","handleTimeUpdate","currentTime","current","index","findHighlightedIndex","durationPerSentence","Math","floor","addEventListener","removeEventListener","className","children","map","sentence","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mayank.mongia/Desktop/Personal/Repo Final/BASKETBALLCLUB/Elite-Final/WIP/GettingThere/Untitled/my-app/src/Component/Main/Transcript/Transcript.js"],"sourcesContent":["// Transcript.js\nimport React, { useState, useEffect } from 'react';\n\nconst Transcript = ({ text, audioRef }) => {\n  const [highlightedIndex, setHighlightedIndex] = useState(0);\n\n  useEffect(() => {\n    const handleTimeUpdate = () => {\n      const currentTime = audioRef.current.currentTime;\n      // Find the index of the transcript text that corresponds to the current audio time\n      const index = findHighlightedIndex(currentTime);\n      setHighlightedIndex(index);\n    };\n\n    const findHighlightedIndex = (currentTime) => {\n      // Logic to find the index of the transcript text based on the current audio time\n      // You might need to adjust this logic based on the format of your transcript text and how it matches the audio\n      // For simplicity, let's assume each sentence in the transcript corresponds to a fixed duration of audio\n      const durationPerSentence = 5; // Assuming each sentence lasts for 5 seconds\n      return Math.floor(currentTime / durationPerSentence);\n    };\n\n    audioRef.current.addEventListener('timeupdate', handleTimeUpdate);\n\n    return () => {\n      audioRef.current.removeEventListener('timeupdate', handleTimeUpdate);\n    };\n  }, [audioRef]);\n\n  return (\n    <div className=\"transcript\">\n      {text.map((sentence, index) => (\n        <p key={index} className={index === highlightedIndex ? 'highlighted' : ''}>\n          {sentence}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Transcript;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAE3DC,SAAS,CAAC,MAAM;IACd,MAAMS,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,MAAMC,WAAW,GAAGL,QAAQ,CAACM,OAAO,CAACD,WAAW;MAChD;MACA,MAAME,KAAK,GAAGC,oBAAoB,CAACH,WAAW,CAAC;MAC/CF,mBAAmB,CAACI,KAAK,CAAC;IAC5B,CAAC;IAED,MAAMC,oBAAoB,GAAIH,WAAW,IAAK;MAC5C;MACA;MACA;MACA,MAAMI,mBAAmB,GAAG,CAAC,CAAC,CAAC;MAC/B,OAAOC,IAAI,CAACC,KAAK,CAACN,WAAW,GAAGI,mBAAmB,CAAC;IACtD,CAAC;IAEDT,QAAQ,CAACM,OAAO,CAACM,gBAAgB,CAAC,YAAY,EAAER,gBAAgB,CAAC;IAEjE,OAAO,MAAM;MACXJ,QAAQ,CAACM,OAAO,CAACO,mBAAmB,CAAC,YAAY,EAAET,gBAAgB,CAAC;IACtE,CAAC;EACH,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,oBACEH,OAAA;IAAKiB,SAAS,EAAC,YAAY;IAAAC,QAAA,EACxBhB,IAAI,CAACiB,GAAG,CAAC,CAACC,QAAQ,EAAEV,KAAK,kBACxBV,OAAA;MAAeiB,SAAS,EAAEP,KAAK,KAAKL,gBAAgB,GAAG,aAAa,GAAG,EAAG;MAAAa,QAAA,EACvEE;IAAQ,GADHV,KAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpB,EAAA,CAnCIH,UAAU;AAAAwB,EAAA,GAAVxB,UAAU;AAqChB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}