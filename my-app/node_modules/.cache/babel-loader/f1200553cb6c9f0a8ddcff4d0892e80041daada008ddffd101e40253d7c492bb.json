{"ast":null,"code":"var _jsxFileName = \"/Users/mayank.mongia/Desktop/Personal/Repo Final/BASKETBALLCLUB/Elite-Final/WIP/GettingThere/Untitled/my-app/src/Component/Main/Transcript/Transcript.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transcript = ({\n  text,\n  audioRef\n}) => {\n  _s();\n  const [highlightedIndex, setHighlightedIndex] = useState(0);\n  useEffect(() => {\n    if (!audioRef.current) return;\n    const handleTimeUpdate = () => {\n      const currentTime = audioRef.current.currentTime;\n      console.log('Current Time:', currentTime); // Added console log\n      const index = findHighlightedIndex(currentTime);\n      setHighlightedIndex(index);\n    };\n    const findHighlightedIndex = currentTime => {\n      // Logic to find the index of the transcript text based on the current audio time\n      // Adjust this logic based on your transcript format and audio timing\n      const durationPerSentence = 3; // Assuming each sentence lasts for 5 seconds\n      return Math.floor(currentTime / durationPerSentence);\n    };\n    audioRef.current.addEventListener('timeupdate', handleTimeUpdate);\n    return () => {\n      audioRef.current.removeEventListener('timeupdate', handleTimeUpdate);\n    };\n  }, [audioRef, text]); // Include text in the dependency array\n\n  console.log('Transcript Text:', text); // Added console log for transcript text\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transcript\",\n    children: text.map((sentence, index) => {\n      console.log('Sentence:', sentence); // Added console log for each sentence\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: index === highlightedIndex ? 'highlighted' : '',\n        children: sentence\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Transcript, \"GtMU2p40MX5uoPSonSAGzcHI+G4=\");\n_c = Transcript;\nexport default Transcript;\nvar _c;\n$RefreshReg$(_c, \"Transcript\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Transcript","text","audioRef","_s","highlightedIndex","setHighlightedIndex","current","handleTimeUpdate","currentTime","console","log","index","findHighlightedIndex","durationPerSentence","Math","floor","addEventListener","removeEventListener","className","children","map","sentence","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mayank.mongia/Desktop/Personal/Repo Final/BASKETBALLCLUB/Elite-Final/WIP/GettingThere/Untitled/my-app/src/Component/Main/Transcript/Transcript.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Transcript = ({ text, audioRef }) => {\n  const [highlightedIndex, setHighlightedIndex] = useState(0);\n\n  useEffect(() => {\n    if (!audioRef.current) return;\n\n    const handleTimeUpdate = () => {\n      const currentTime = audioRef.current.currentTime;\n      console.log('Current Time:', currentTime); // Added console log\n      const index = findHighlightedIndex(currentTime);\n      setHighlightedIndex(index);\n    };\n\n    const findHighlightedIndex = (currentTime) => {\n      // Logic to find the index of the transcript text based on the current audio time\n      // Adjust this logic based on your transcript format and audio timing\n      const durationPerSentence = 3; // Assuming each sentence lasts for 5 seconds\n      return Math.floor(currentTime / durationPerSentence);\n    };\n\n    audioRef.current.addEventListener('timeupdate', handleTimeUpdate);\n\n    return () => {\n      audioRef.current.removeEventListener('timeupdate', handleTimeUpdate);\n    };\n  }, [audioRef, text]); // Include text in the dependency array\n\n  console.log('Transcript Text:', text); // Added console log for transcript text\n\n  return (\n    <div className=\"transcript\">\n      {text.map((sentence, index) => {\n        console.log('Sentence:', sentence); // Added console log for each sentence\n        return (\n          <p key={index} className={index === highlightedIndex ? 'highlighted' : ''}>\n            {sentence}\n          </p>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Transcript;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAE3DC,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,QAAQ,CAACI,OAAO,EAAE;IAEvB,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,MAAMC,WAAW,GAAGN,QAAQ,CAACI,OAAO,CAACE,WAAW;MAChDC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,WAAW,CAAC,CAAC,CAAC;MAC3C,MAAMG,KAAK,GAAGC,oBAAoB,CAACJ,WAAW,CAAC;MAC/CH,mBAAmB,CAACM,KAAK,CAAC;IAC5B,CAAC;IAED,MAAMC,oBAAoB,GAAIJ,WAAW,IAAK;MAC5C;MACA;MACA,MAAMK,mBAAmB,GAAG,CAAC,CAAC,CAAC;MAC/B,OAAOC,IAAI,CAACC,KAAK,CAACP,WAAW,GAAGK,mBAAmB,CAAC;IACtD,CAAC;IAEDX,QAAQ,CAACI,OAAO,CAACU,gBAAgB,CAAC,YAAY,EAAET,gBAAgB,CAAC;IAEjE,OAAO,MAAM;MACXL,QAAQ,CAACI,OAAO,CAACW,mBAAmB,CAAC,YAAY,EAAEV,gBAAgB,CAAC;IACtE,CAAC;EACH,CAAC,EAAE,CAACL,QAAQ,EAAED,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEtBQ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAET,IAAI,CAAC,CAAC,CAAC;;EAEvC,oBACEF,OAAA;IAAKmB,SAAS,EAAC,YAAY;IAAAC,QAAA,EACxBlB,IAAI,CAACmB,GAAG,CAAC,CAACC,QAAQ,EAAEV,KAAK,KAAK;MAC7BF,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEW,QAAQ,CAAC,CAAC,CAAC;MACpC,oBACEtB,OAAA;QAAemB,SAAS,EAAEP,KAAK,KAAKP,gBAAgB,GAAG,aAAa,GAAG,EAAG;QAAAe,QAAA,EACvEE;MAAQ,GADHV,KAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC;IAER,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CAzCIH,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AA2ChB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}